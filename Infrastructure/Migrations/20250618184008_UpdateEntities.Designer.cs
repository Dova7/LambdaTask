// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618184008_UpdateEntities")]
    partial class UpdateEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Balances");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25238630-5128-4e60-bb20-d74294d27e0f"),
                            Amount = 1000,
                            Currency = 1,
                            UserId = new Guid("c79eea5e-34fc-480b-a4df-7bd440d6c684")
                        },
                        new
                        {
                            Id = new Guid("f0edd732-876b-4879-bf97-8a9793107eb6"),
                            Amount = 500,
                            Currency = 1,
                            UserId = new Guid("31284e51-c5d0-4a66-9497-92d2f0ded4bf")
                        },
                        new
                        {
                            Id = new Guid("af3fbcb8-b29e-4233-8c34-9ae529f5943a"),
                            Amount = 500,
                            Currency = 1,
                            UserId = new Guid("1365fcba-5ebf-45b9-b67c-11dc33b91b12")
                        },
                        new
                        {
                            Id = new Guid("817b5a71-cdde-4899-bf32-f685ca0adda2"),
                            Amount = 500,
                            Currency = 1,
                            UserId = new Guid("ec4a0ad9-5aa4-4f70-9ab6-f37246664eff")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94078db3-2fd2-4de9-9f16-2b34036c99b9"),
                            GameName = "Game 1"
                        },
                        new
                        {
                            Id = new Guid("457158ec-b964-4287-b441-75599a9013bc"),
                            GameName = "Game 2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1365fcba-5ebf-45b9-b67c-11dc33b91b12"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea54aa7c-d347-4c53-9e9e-92ea9537b399",
                            DisplayName = "SUPERADMIN",
                            Email = "SUPERADMIN@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "SUPERADMIN",
                            LastName = "SUPERADMIN",
                            LockoutEnabled = true,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC1/XJteAGjtT42I5EgLk8mNvBOHxytHg/yQzeTZfn5rUsPRI8Y+18aqnzEfQ2e4AA==",
                            PhoneNumber = "555337681",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("ec4a0ad9-5aa4-4f70-9ab6-f37246664eff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f939802-5a6a-4d57-91b7-b9a5224fd09d",
                            DisplayName = "JDoe",
                            Email = "jdoe@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "JDOE@GMAIL.COM",
                            NormalizedUserName = "JDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEI0sn1hguq5sQDbdQMGKJiEvxHCtztdyrL854UKeHX83IQ6h3gP3w8TF/oRHfnG1lQ==",
                            PhoneNumber = "525337631",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "jdoe"
                        },
                        new
                        {
                            Id = new Guid("c79eea5e-34fc-480b-a4df-7bd440d6c684"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4229f8a4-86e7-42d9-b588-91f47795f322",
                            DisplayName = "Jane",
                            Email = "Jane.Doe@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = true,
                            NormalizedEmail = "JANE.DOE@GMAIL.COM",
                            NormalizedUserName = "JANE123",
                            PasswordHash = "AQAAAAIAAYagAAAAELQH7+6VkAN1a2EmYyMAQXAoX0gsStnT0Zu9ignOPOaxExDqNJnYLfh2b2iqG6izkw==",
                            PhoneNumber = "155327601",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jane123"
                        },
                        new
                        {
                            Id = new Guid("31284e51-c5d0-4a66-9497-92d2f0ded4bf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a3af97b-7f0b-45e8-81a1-76f44254fde2",
                            DisplayName = "JWhite",
                            Email = "j.white@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "White",
                            LockoutEnabled = true,
                            NormalizedEmail = "J.WHITE@GMAIL.COM",
                            NormalizedUserName = "WHITE123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGEh3jAOCi0giONFwqqKDrONkHYF3Ea8D3PIyRD8H5qWyDmANv9D7udNj6V3Dim9LQ==",
                            PhoneNumber = "525310601",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "white123"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LedgerEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Guid>("BalanceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionDescription")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("GameId");

                    b.ToTable("LedgerEntries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a69d219b-bb64-4ae9-b0c6-261da24d52d2"),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("12c11b67-5466-4a81-ad5c-6d35fce015f1"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("1c2ea9d7-9fd2-40a8-85f4-72a4d4608062"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1365fcba-5ebf-45b9-b67c-11dc33b91b12"),
                            RoleId = new Guid("a69d219b-bb64-4ae9-b0c6-261da24d52d2")
                        },
                        new
                        {
                            UserId = new Guid("ec4a0ad9-5aa4-4f70-9ab6-f37246664eff"),
                            RoleId = new Guid("12c11b67-5466-4a81-ad5c-6d35fce015f1")
                        },
                        new
                        {
                            UserId = new Guid("c79eea5e-34fc-480b-a4df-7bd440d6c684"),
                            RoleId = new Guid("1c2ea9d7-9fd2-40a8-85f4-72a4d4608062")
                        },
                        new
                        {
                            UserId = new Guid("31284e51-c5d0-4a66-9497-92d2f0ded4bf"),
                            RoleId = new Guid("1c2ea9d7-9fd2-40a8-85f4-72a4d4608062")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Balance", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Balances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Domain.Entities.LedgerEntry", b =>
                {
                    b.HasOne("Domain.Entities.Balance", "Balance")
                        .WithMany("LedgerEntries")
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Balance");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Balance", b =>
                {
                    b.Navigation("LedgerEntries");
                });

            modelBuilder.Entity("Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Balances");
                });
#pragma warning restore 612, 618
        }
    }
}
